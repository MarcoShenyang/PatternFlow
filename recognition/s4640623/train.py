# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AI3ZXJ35Yk0OBhNHAKszTZsjS2zlDqtM
"""

from google.colab import drive
drive.mount('/content/gdrive')
import sys
sys.path.insert(0, 'gdrive/MyDrive/Colab Notebooks/Lab 3')

import torch.optim as optim
import torch.nn.functional as func
import time
import pandas as pd
import numpy as np
import umap
import umap.plot

import modules
import dataset

# Load and process data
data = load_data()
train_ds, valid_ds, test_ds, features, target, edges = process_data(data)
adj = adj_matrix(data)

def accuracy(output, target):
  preds = output.max(1)[1].type_as(target)
  correct = preds.eq(target).double()
  correct = correct.sum()
  return correct / len(target)

def train(epoch):
  t = time.time()
  model.train()
  optimizer.zero_grad()
  output = model(features, adj)

  # Use negative log likelihood loss
  loss_train = func.nll_loss(output[train_ds], target[train_ds])
  acc_train = accuracy(output[train_ds], target[train_ds])
  loss_train.backward()
  optimizer.step()

  loss_val = func.nll_loss(output[valid_ds], target[valid_ds])
  acc_val = accuracy(output[valid_ds], target[valid_ds])
  print('Epoch: {}/{}'.format(epoch+1, epoch),
        'loss: {:.4f}'.format(loss_train.item()),
        'accuracy: {:.4f}'.format(acc_train.item()),
        'val_loss: {:.4f}'.format(loss_val.item()),
        'val_acc: {:.4f}'.format(acc_val.item()),
        'time: {:.4f}s'.format(time.time() - t))

def model_init(features, data):
  model = GCN(features.size(dim = 1),
              features.size(dim = 1),
              data['target'].argmax())
  return model

optimizer = optim.Adam(model.parameters(),
                       lr=0.01, weight_decay=5e-4)
model = model_init(features, data)
for epoch in range(20):
  train(epoch)

mapper = umap.UMAP().fit(data['features'])
umap.plot.points(mapper, labels = data['target'])