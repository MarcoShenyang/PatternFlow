# -*- coding: utf-8 -*-
"""modules.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r55TvMxcRI8hnAjOV5IUUw1kz-YDp7tL
"""

import math
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as func
import torch.optim as optim

from torch.nn.parameter import Parameter
from torch.nn.modules.module import Module

class GraphConvolutionLayer(Module):

  def __init__(self, input_feat, output_feat, bias=True):
    super(GraphConvolutionLayer, self).__init__()
    self._input_feat = input_feat
    self._output_feat = output_feat
    self.weight = Parameter(torch.FloatTensor(self._input_feat, self._output_feat))
    self.bias = Parameter(torch.FloatTensor(self._output_feat))
    self.reset_parameters()

  def reset_parameters(self):
    stdv = 1. / math.sqrt(self.weight.size(1))
    self.weight.data.uniform_(-stdv, stdv)
    print(self._output_feat)
    self.bias.data.uniform_(-stdv, stdv)

  def forward(self, input, adj):
        support = torch.mm(input, self.weight)
        output = torch.spmm(adj, support)
        return output + self.bias

class GCN(nn.Module):
  def __init__(self, nfeat, nhid, nclass, dropout = 0.5):
    super(GCN, self).__init__()
    self.GraphConv1 = GraphConvolutionLayer(nfeat, nhid)
    self.GraphConv2 = GraphConvolutionLayer(nhid, nclass)
    self.dropout = dropout

  def forward(self, x, adj):
    x = func.relu(self.GraphConv1(x, adj))
    x = func.dropout(x, self.dropout, training=self.training)
    x = self.GraphConv1(x, adj)
    return func.log_softmax(x, dim=1)